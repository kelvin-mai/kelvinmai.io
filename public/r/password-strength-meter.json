{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "password-strength-meter",
  "type": "registry:component",
  "title": "Password Strength Meter",
  "description": "Component to measure password strength",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/registry/default/ui/password-strength-meter.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { Check, X } from 'lucide-react';\n\nimport { cn } from '@/lib/utils';\n\nexport type PasswordRequirements = {\n  text: string;\n  test: (password: string) => boolean;\n};\n\nexport const defaultRequirements: PasswordRequirements[] = [\n  {\n    text: 'At least 8 characters',\n    test: (s) => s.length >= 8,\n  },\n  {\n    text: 'At least 1 number',\n    test: (s) => /[0-9]/.test(s),\n  },\n  {\n    text: 'At least 1 uppercase letter',\n    test: (s) => /[A-Z]/.test(s),\n  },\n  {\n    text: 'At least 1 lowercase letter',\n    test: (s) => /[a-z]/.test(s),\n  },\n  {\n    text: 'At least one special character',\n    test: (s) => /[^A-Za-z0-9]/.test(s),\n  },\n];\n\ntype PasswordStrengthMeterProps = {\n  password: string;\n  requirements?: PasswordRequirements[];\n};\n\nexport const PasswordStrengthMeter: React.FC<PasswordStrengthMeterProps> = ({\n  password,\n  requirements = defaultRequirements,\n}) => {\n  const [requirementsMet, setRequirementsMet] = React.useState<boolean[]>([]);\n  React.useEffect(() => {\n    const met = requirements.map((req) => req.test(password));\n    setRequirementsMet(met);\n  }, [password, requirements]);\n\n  const strengthScore = requirementsMet.filter(Boolean).length;\n\n  const strengthText = React.useMemo(() => {\n    if (!password || password.length === 0) {\n      return 'Enter a password';\n    } else if (strengthScore >= requirements.length - 1) {\n      return 'Strong password';\n    } else if (strengthScore >= Math.floor(requirements.length - 1 / 2)) {\n      return 'Medium password';\n    } else {\n      return 'Weak password';\n    }\n  }, [password, requirements, strengthScore]);\n\n  const strengthColor = React.useMemo(() => {\n    if (!password || password.length === 0) {\n      return 'bg-border';\n    } else if (strengthScore >= requirements.length - 1) {\n      return 'bg-emerald-500';\n    } else if (strengthScore >= Math.floor(requirements.length - 1 / 2)) {\n      return 'bg-amber-500';\n    } else {\n      return 'bg-orange-500';\n    }\n  }, [password, requirements, strengthScore]);\n\n  return (\n    <div>\n      <div\n        className='bg-border mt-3 mb-4 h-1 w-full overflow-hidden rounded-full'\n        role='progressbar'\n        aria-valuenow={strengthScore}\n        aria-valuemin={0}\n        aria-valuemax={requirements.length}\n        aria-label='Password strength'\n      >\n        <div\n          className={cn(\n            'h-full transition-all duration-500 ease-out',\n            strengthColor,\n          )}\n          style={{ width: `${(strengthScore / requirements.length) * 100}%` }}\n        ></div>\n      </div>\n      <p className='text-foreground mb-2 text-sm font-medium'>\n        {strengthText}. Must contain:\n      </p>\n\n      <ul className='space-y-1.5' aria-label='Password requirements'>\n        {requirements.map((req, i) => (\n          <li key={i} className='flex items-center gap-2'>\n            {requirementsMet[i] ? (\n              <Check\n                size={16}\n                className='text-emerald-500'\n                aria-hidden='true'\n              />\n            ) : (\n              <X\n                size={16}\n                className='text-muted-foreground/80'\n                aria-hidden='true'\n              />\n            )}\n            <span\n              className={cn(\n                'text-xs',\n                requirementsMet[i]\n                  ? 'text-emerald-600'\n                  : 'text-muted-foreground',\n              )}\n            >\n              {req.text}\n              <span className='sr-only'>\n                {requirementsMet[i]\n                  ? ' - Requirement met'\n                  : ' - Requirement not met'}\n              </span>\n            </span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n",
      "type": "registry:component"
    }
  ]
}