/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import React from "react";

export const Index: Record<string, any> = {
  "color-picker": {
    name: "color-picker",
    description: "A color picker component",
    type: "registry:component",
    files: [{
      path: "src/registry/default/ui/color-picker.tsx",
      content: "'use client';\n\nimport * as React from 'react';\nimport { HexAlphaColorPicker, HexColorPicker } from 'react-colorful';\n\nimport { Input } from '@/components/ui/input';\nimport { cn } from '@/lib/utils';\n\nexport type ColorPickerProps = Omit<\n  React.ComponentProps<typeof Input>,\n  'value' | 'onChange' | 'onBlur'\n> & {\n  value?: string;\n  alpha?: boolean;\n  onChange: (value: string) => void;\n};\n\nexport const ColorPicker: React.FC<ColorPickerProps> = ({\n  className,\n  value,\n  alpha,\n  onChange,\n  ...props\n}) => {\n  return (\n    <div className={cn('space-y-2', className)}>\n      {alpha ? (\n        <HexAlphaColorPicker color={value} onChange={onChange} {...props} />\n      ) : (\n        <HexColorPicker color={value} onChange={onChange} {...props} />\n      )}\n\n      <Input\n        id='custom'\n        value={value}\n        className='h-8 w-[200px]'\n        onChange={(e) => onChange(e.currentTarget.value)}\n        {...props}\n      />\n    </div>\n  );\n};\nColorPicker.displayName = 'ColorPicker';\n",
      type: "registry:component",
    }],
  },
  "floating-label-input": {
    name: "floating-label-input",
    description: "Material UI floating label input",
    type: "registry:component",
    files: [{
      path: "src/registry/default/ui/floating-label-input.tsx",
      content: "import * as React from 'react';\n\nimport { cn } from '@/lib/utils';\nimport { Label } from '@radix-ui/react-label';\nimport { Input } from '@/components/ui/input';\n\nexport const FloatingLabel: React.FC<React.ComponentProps<typeof Label>> = ({\n  className,\n  ...props\n}) => {\n  return (\n    <Label\n      className={cn(\n        'peer-has-focus:secondary bg-background absolute start-2 top-2 z-10 origin-[0] -translate-y-4 scale-75 transform cursor-text px-2 text-sm text-gray-500 duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-2 peer-focus:-translate-y-4 peer-focus:scale-75 peer-focus:px-2 rtl:peer-focus:left-auto rtl:peer-focus:translate-x-1/4',\n        className,\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const FloatingInput: React.FC<\n  React.ComponentProps<'input'> & {\n    label: string;\n  }\n> = ({ id, label, className, ...props }) => {\n  return (\n    <div className='relative'>\n      <Input\n        id={id}\n        className={cn('peer bg-background', className)}\n        placeholder=' '\n        {...props}\n      />\n      <FloatingLabel htmlFor={id}>{label}</FloatingLabel>\n    </div>\n  );\n};\n",
      type: "registry:component",
    }],
  },
  "theme-switch": {
    name: "theme-switch",
    description: "Animated theme switch",
    type: "registry:component",
    files: [{
      path: "src/registry/default/ui/theme-switch.tsx",
      content: "'use client';\n\nimport React, { type JSX, useEffect, useState } from 'react';\nimport { MonitorIcon, MoonStarIcon, SunIcon } from 'lucide-react';\nimport { motion } from 'motion/react';\nimport { useTheme } from 'next-themes';\n\nimport { cn } from '@/lib/utils';\n\nconst ThemeOption = ({\n  icon,\n  value,\n  isActive,\n  onClick,\n}: {\n  icon: JSX.Element;\n  value: string;\n  isActive?: boolean;\n  onClick: (value: string) => void;\n}) => {\n  return (\n    <button\n      className={cn(\n        'relative flex size-8 cursor-default items-center justify-center rounded-full transition-all [&_svg]:size-4',\n        isActive\n          ? 'text-zinc-950 dark:text-zinc-50'\n          : 'text-zinc-400 hover:text-zinc-950 dark:text-zinc-500 dark:hover:text-zinc-50',\n      )}\n      role='radio'\n      aria-checked={isActive}\n      aria-label={\`Switch to \${value} theme\`}\n      onClick={() => onClick(value)}\n    >\n      {icon}\n\n      {isActive && (\n        <motion.div\n          layoutId='theme-option'\n          transition={{ type: 'spring', bounce: 0.3, duration: 0.6 }}\n          className='absolute inset-0 rounded-full border border-zinc-200 dark:border-zinc-700'\n        />\n      )}\n    </button>\n  );\n};\n\nconst THEME_OPTIONS = [\n  {\n    icon: <MonitorIcon />,\n    value: 'system',\n  },\n  {\n    icon: <SunIcon />,\n    value: 'light',\n  },\n  {\n    icon: <MoonStarIcon />,\n    value: 'dark',\n  },\n];\n\nconst ThemeSwitch = () => {\n  const { theme, setTheme } = useTheme();\n\n  const [isMounted, setIsMounted] = useState(false);\n\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  if (!isMounted) {\n    return <div className='flex h-8 w-24' />;\n  }\n\n  return (\n    <motion.div\n      key={String(isMounted)}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n      className='inline-flex items-center overflow-hidden rounded-full bg-white ring-1 ring-zinc-200 ring-inset dark:bg-zinc-950 dark:ring-zinc-700'\n      role='radiogroup'\n    >\n      {THEME_OPTIONS.map((option) => (\n        <ThemeOption\n          key={option.value}\n          icon={option.icon}\n          value={option.value}\n          isActive={theme === option.value}\n          onClick={setTheme}\n        />\n      ))}\n    </motion.div>\n  );\n};\n\nexport { ThemeSwitch };\n",
      type: "registry:component",
    }],
  },
  "use-boolean": {
    name: "use-boolean",
    description: "A hook to manage boolean states with common methods to set the value to true, false or toggle between them",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/use-boolean.ts",
      content: "'use client';\n\nimport * as React from 'react';\n\nexport function useBoolean(defaultValue = false) {\n  if (typeof defaultValue !== 'boolean') {\n    throw new Error('defaultValue must be \`true\` or \`false\`');\n  }\n  const [value, setValue] = React.useState(defaultValue);\n\n  const setTrue = React.useCallback(() => {\n    setValue(true);\n  }, []);\n\n  const setFalse = React.useCallback(() => {\n    setValue(false);\n  }, []);\n\n  const toggle = React.useCallback(() => {\n    setValue((x) => !x);\n  }, []);\n\n  return { value, setValue, setTrue, setFalse, toggle };\n}\n",
      type: "registry:hook",
    }],
  },
  "use-mounted": {
    name: "use-mounted",
    description: "A hook that returns a boolean to check when the component has mounted",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/use-mounted.ts",
      content: "'use client';\n\nimport * as React from 'react';\n\nexport const useMounted = () => {\n  const [mounted, setMounted] = React.useState<boolean>(false);\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n  return mounted;\n};\n",
      type: "registry:hook",
    }],
  },
  "use-interval": {
    name: "use-interval",
    description: "A hook that executes a callback function at specified delays using the useInterval API",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/use-interval.ts",
      content: "'use client';\n\nimport * as React from 'react';\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n  const ref = React.useRef(callback);\n  React.useEffect(() => {\n    ref.current = callback;\n  }, [callback]);\n\n  React.useEffect(() => {\n    if (delay === null || typeof delay !== 'number') {\n      return;\n    }\n    const tick = () => ref.current();\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n};\n",
      type: "registry:hook",
    }],
  },
  "use-theme": {
    name: "use-theme",
    description: "An extension to next-theme's use-theme hook to manage multiple shadcn color theme",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/use-theme.ts",
      content: "'use client';\n\nimport * as React from 'react';\nimport { useTheme as useNextTheme } from 'next-themes';\n\n// !callout[/colorThemes/] Add your own theme names here\nexport const colorThemes = [\n  'default',\n  'bubblegum',\n  'monochrome',\n  'supabase',\n  'twitter',\n  'vercel',\n] as const;\n\nexport type ColorTheme = (typeof colorThemes)[number];\nexport type Theme = 'system' | 'light' | 'dark';\n\nexport const useTheme = () => {\n  const { setTheme, resolvedTheme } = useNextTheme();\n  const [colorTheme, setColorTheme] = React.useState<ColorTheme>('default');\n\n  React.useEffect(() => {\n    if (typeof window === 'undefined') return;\n    const saved = localStorage.getItem('color-theme') as ColorTheme | null;\n    if (saved) {\n      setColorTheme(saved);\n      document.documentElement.classList.add(\`theme-\${saved}\`);\n    }\n  }, []);\n\n  const updateColorTheme = React.useCallback((next: ColorTheme) => {\n    if (typeof window === 'undefined') return;\n\n    document.documentElement.classList.remove(\n      ...colorThemes.map((c) => \`theme-\${c}\`),\n    );\n    if (next !== 'default') {\n      document.documentElement.classList.add(\`theme-\${next}\`);\n    }\n    localStorage.setItem('color-theme', next);\n    setColorTheme(next);\n  }, []);\n\n  return {\n    setTheme,\n    theme: resolvedTheme as Theme,\n    colorTheme: colorTheme,\n    setColorTheme: updateColorTheme,\n  };\n};\n",
      type: "registry:hook",
    }],
  },
  "use-timeout": {
    name: "use-timeout",
    description: "A hook that executes a callback function after a specified delay using the setTimeout API",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/use-interval.ts",
      content: "'use client';\n\nimport * as React from 'react';\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n  const ref = React.useRef(callback);\n  React.useEffect(() => {\n    ref.current = callback;\n  }, [callback]);\n\n  React.useEffect(() => {\n    if (delay === null || typeof delay !== 'number') {\n      return;\n    }\n    const tick = () => ref.current();\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n};\n",
      type: "registry:hook",
    }],
  },
  "use-unmount": {
    name: "use-unmount",
    description: "A hook that runs a cleanup function when the component is unmounted",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/use-unmount.ts",
      content: "import * as React from 'react';\n\nexport const useUnmount = (f: () => void) => {\n  const fRef = React.useRef(f);\n  fRef.current = f;\n  React.useEffect(\n    () => () => {\n      fRef.current();\n    },\n    [],\n  );\n};\n",
      type: "registry:hook",
    }],
  },
  "color-picker-demo": {
    name: "color-picker-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/color-picker-demo.tsx",
      content: "'use client';\n\nimport * as React from 'react';\n\nimport { ColorPicker } from '@/registry/default/ui/color-picker';\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState<string>('#06b6d4');\n  return <ColorPicker value={color} onChange={setColor} />;\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/color-picker-demo.tsx")),
    source: "'use client';\n\nimport * as React from 'react';\n\nimport { ColorPicker } from '@/registry/default/ui/color-picker';\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState<string>('#06b6d4');\n  return <ColorPicker value={color} onChange={setColor} />;\n}\n",
  },
  "color-picker-alpha-demo": {
    name: "color-picker-alpha-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/color-picker-alpha-demo.tsx",
      content: "'use client';\n\nimport * as React from 'react';\n\nimport { ColorPicker } from '@/registry/default/ui/color-picker';\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState<string>('#7c3aed');\n  return <ColorPicker value={color} onChange={setColor} alpha />;\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/color-picker-alpha-demo.tsx")),
    source: "'use client';\n\nimport * as React from 'react';\n\nimport { ColorPicker } from '@/registry/default/ui/color-picker';\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState<string>('#7c3aed');\n  return <ColorPicker value={color} onChange={setColor} alpha />;\n}\n",
  },
  "color-picker-popover-demo": {
    name: "color-picker-popover-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/color-picker-popover-demo.tsx",
      content: "'use client';\n\nimport * as React from 'react';\nimport { Paintbrush } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\nimport { ColorPicker } from '@/registry/default/ui/color-picker';\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState<string>('');\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant='outline' className={cn(!color && 'text-slate-500')}>\n          <div className='flex w-full items-center gap-2'>\n            {color ? (\n              <div\n                className={cn(\n                  'size-4 rounded border !bg-cover !bg-center transition-all',\n                )}\n                style={{ background: color }}\n              />\n            ) : (\n              <Paintbrush className='size-4' />\n            )}\n          </div>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className='w-60 space-y-2'>\n        <ColorPicker value={color} onChange={setColor} />\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/color-picker-popover-demo.tsx")),
    source: "'use client';\n\nimport * as React from 'react';\nimport { Paintbrush } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\nimport { ColorPicker } from '@/registry/default/ui/color-picker';\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState<string>('');\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant='outline' className={cn(!color && 'text-slate-500')}>\n          <div className='flex w-full items-center gap-2'>\n            {color ? (\n              <div\n                className={cn(\n                  'size-4 rounded border !bg-cover !bg-center transition-all',\n                )}\n                style={{ background: color }}\n              />\n            ) : (\n              <Paintbrush className='size-4' />\n            )}\n          </div>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className='w-60 space-y-2'>\n        <ColorPicker value={color} onChange={setColor} />\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
  },
  "floating-label-input-demo": {
    name: "floating-label-input-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/floating-label-input-demo.tsx",
      content: "import * as React from 'react';\nimport { FloatingInput } from '../ui/floating-label-input';\n\nexport default function FloatingInputDemo() {\n  return (\n    <FloatingInput\n      id='floating-label-input-demo'\n      label='Floating Label'\n      // placeholder='Longer Placeholder text'\n    />\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/floating-label-input-demo.tsx")),
    source: "import * as React from 'react';\nimport { FloatingInput } from '../ui/floating-label-input';\n\nexport default function FloatingInputDemo() {\n  return (\n    <FloatingInput\n      id='floating-label-input-demo'\n      label='Floating Label'\n      // placeholder='Longer Placeholder text'\n    />\n  );\n}\n",
  },
  "theme-switch-demo": {
    name: "theme-switch-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/theme-switch-demo.tsx",
      content: "import { ThemeSwitch } from '@/registry/default/ui/theme-switch';\n\nexport default function ThemeSwitchDemo() {\n  return <ThemeSwitch />;\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/theme-switch-demo.tsx")),
    source: "import { ThemeSwitch } from '@/registry/default/ui/theme-switch';\n\nexport default function ThemeSwitchDemo() {\n  return <ThemeSwitch />;\n}\n",
  },
  "use-interval-demo": {
    name: "use-interval-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/use-interval-demo.tsx",
      content: "import * as React from 'react';\n\nimport { useInterval } from '@/registry/default/hooks/use-interval';\n\nexport function UseIntervalDemo() {\n  const colors = [\n    '#7081d0',\n    '#04d1f9',\n    '#37f499',\n    '#f7c67f',\n    '#f265b5',\n    '#a48cf2',\n    '#f16c75',\n    '#f1fc79',\n  ];\n  const [index, setIndex] = React.useState(0);\n\n  useInterval(() => setIndex((index) => index + 1), 1000);\n\n  const color = colors[index % colors.length];\n\n  return (\n    <div\n      className='size-48 rounded-xl transition-all duration-300 ease-in'\n      style={{\n        background: color,\n      }}\n    />\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/use-interval-demo.tsx")),
    source: "import * as React from 'react';\n\nimport { useInterval } from '@/registry/default/hooks/use-interval';\n\nexport function UseIntervalDemo() {\n  const colors = [\n    '#7081d0',\n    '#04d1f9',\n    '#37f499',\n    '#f7c67f',\n    '#f265b5',\n    '#a48cf2',\n    '#f16c75',\n    '#f1fc79',\n  ];\n  const [index, setIndex] = React.useState(0);\n\n  useInterval(() => setIndex((index) => index + 1), 1000);\n\n  const color = colors[index % colors.length];\n\n  return (\n    <div\n      className='size-48 rounded-xl transition-all duration-300 ease-in'\n      style={{\n        background: color,\n      }}\n    />\n  );\n}\n",
  },
  "use-theme-demo": {
    name: "use-theme-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/use-theme-demo.tsx",
      content: "'use client';\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui';\nimport {\n  useTheme,\n  colorThemes,\n  type ColorTheme,\n} from '@/registry/default/hooks/use-theme';\nimport { ThemeSwitch } from '@/registry/default/ui/theme-switch';\n\nexport default function UseThemeDemo() {\n  const { colorTheme, setColorTheme } = useTheme();\n  return (\n    <div className='bg-card text-card-foreground space-y-2 rounded-lg border p-4 shadow-sm'>\n      <div className='flex items-center justify-center'>\n        <ThemeSwitch />\n      </div>\n      <div className='flex flex-col gap-2'>\n        <Select\n          value={colorTheme}\n          onValueChange={(v: ColorTheme) => setColorTheme(v)}\n        >\n          <SelectTrigger className='capitalize'>\n            <SelectValue placeholder='Choose a theme' />\n          </SelectTrigger>\n          <SelectContent>\n            {colorThemes.map((theme) => (\n              <SelectItem key={theme} className='capitalize' value={theme}>\n                {theme}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/use-theme-demo.tsx")),
    source: "'use client';\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui';\nimport {\n  useTheme,\n  colorThemes,\n  type ColorTheme,\n} from '@/registry/default/hooks/use-theme';\nimport { ThemeSwitch } from '@/registry/default/ui/theme-switch';\n\nexport default function UseThemeDemo() {\n  const { colorTheme, setColorTheme } = useTheme();\n  return (\n    <div className='bg-card text-card-foreground space-y-2 rounded-lg border p-4 shadow-sm'>\n      <div className='flex items-center justify-center'>\n        <ThemeSwitch />\n      </div>\n      <div className='flex flex-col gap-2'>\n        <Select\n          value={colorTheme}\n          onValueChange={(v: ColorTheme) => setColorTheme(v)}\n        >\n          <SelectTrigger className='capitalize'>\n            <SelectValue placeholder='Choose a theme' />\n          </SelectTrigger>\n          <SelectContent>\n            {colorThemes.map((theme) => (\n              <SelectItem key={theme} className='capitalize' value={theme}>\n                {theme}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n}\n",
  },
  "use-timeout-demo": {
    name: "use-timeout-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/use-timeout-demo.tsx",
      content: "'use client';\n\nimport React from 'react';\nimport { RefreshCwIcon } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { useTimeout } from '@/registry/default/hooks/use-timeout';\n\nexport function UseTimeoutDemo() {\n  const [hasDefused, setHasDefused] = React.useState(false);\n  const [hasExploded, setHasExploded] = React.useState(false);\n\n  useTimeout(\n    () => {\n      setHasExploded(!hasExploded);\n    },\n    hasDefused ? null : 1000,\n  );\n\n  return (\n    <div className='flex flex-col items-center gap-8'>\n      <Button\n        onClick={() => {\n          setHasDefused(false);\n          setHasExploded(false);\n        }}\n        disabled={!(hasDefused || hasExploded)}\n      >\n        Replay <RefreshCwIcon className='size-4' />\n      </Button>\n      <p>You have 1s to defuse (click) the bomb or it will explode</p>\n      {hasExploded ? (\n        <figure className='flex flex-col items-center gap-1'>\n          <span role='img' aria-label='Explosion Emoji' className='text-5xl'>\n            💥\n          </span>\n          <figcaption>You lose</figcaption>\n        </figure>\n      ) : hasDefused ? (\n        <figure className='flex flex-col items-center gap-1'>\n          <span role='img' aria-label='Explosion Emoji' className='text-5xl'>\n            🎉\n          </span>\n          <figcaption>You Win</figcaption>\n        </figure>\n      ) : (\n        <button\n          className='text-5xl'\n          onClick={() => setHasDefused((hasDefused) => !hasDefused)}\n        >\n          <span role='img' aria-label='Dynamite Emoji'>\n            🧨\n          </span>\n        </button>\n      )}\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/use-timeout-demo.tsx")),
    source: "'use client';\n\nimport React from 'react';\nimport { RefreshCwIcon } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { useTimeout } from '@/registry/default/hooks/use-timeout';\n\nexport function UseTimeoutDemo() {\n  const [hasDefused, setHasDefused] = React.useState(false);\n  const [hasExploded, setHasExploded] = React.useState(false);\n\n  useTimeout(\n    () => {\n      setHasExploded(!hasExploded);\n    },\n    hasDefused ? null : 1000,\n  );\n\n  return (\n    <div className='flex flex-col items-center gap-8'>\n      <Button\n        onClick={() => {\n          setHasDefused(false);\n          setHasExploded(false);\n        }}\n        disabled={!(hasDefused || hasExploded)}\n      >\n        Replay <RefreshCwIcon className='size-4' />\n      </Button>\n      <p>You have 1s to defuse (click) the bomb or it will explode</p>\n      {hasExploded ? (\n        <figure className='flex flex-col items-center gap-1'>\n          <span role='img' aria-label='Explosion Emoji' className='text-5xl'>\n            💥\n          </span>\n          <figcaption>You lose</figcaption>\n        </figure>\n      ) : hasDefused ? (\n        <figure className='flex flex-col items-center gap-1'>\n          <span role='img' aria-label='Explosion Emoji' className='text-5xl'>\n            🎉\n          </span>\n          <figcaption>You Win</figcaption>\n        </figure>\n      ) : (\n        <button\n          className='text-5xl'\n          onClick={() => setHasDefused((hasDefused) => !hasDefused)}\n        >\n          <span role='img' aria-label='Dynamite Emoji'>\n            🧨\n          </span>\n        </button>\n      )}\n    </div>\n  );\n}\n",
  },
}