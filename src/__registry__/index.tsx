/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import React from "react";

export const Index: Record<string, any> = {
  "color-picker": {
    name: "color-picker",
    description: "A color picker component",
    type: "registry:component",
    files: [{
      path: "src/registry/default/ui/color-picker.tsx",
      content: "'use client';\n\nimport * as React from 'react';\nimport { HexAlphaColorPicker, HexColorPicker } from 'react-colorful';\n\nimport { Input } from '@/components/ui/input';\nimport { cn } from '@/lib/utils';\n\nexport type ColorPickerProps = Omit<\n  React.ComponentProps<typeof Input>,\n  'value' | 'onChange' | 'onBlur'\n> & {\n  value?: string;\n  alpha?: boolean;\n  onChange: (value: string) => void;\n};\n\nexport const ColorPicker: React.FC<ColorPickerProps> = ({\n  className,\n  value,\n  alpha,\n  onChange,\n  ...props\n}) => {\n  return (\n    <div className={cn('space-y-2', className)}>\n      {alpha ? (\n        <HexAlphaColorPicker color={value} onChange={onChange} {...props} />\n      ) : (\n        <HexColorPicker color={value} onChange={onChange} {...props} />\n      )}\n\n      <Input\n        id='custom'\n        value={value}\n        className='h-8 w-[200px]'\n        onChange={(e) => onChange(e.currentTarget.value)}\n        {...props}\n      />\n    </div>\n  );\n};\nColorPicker.displayName = 'ColorPicker';\n",
      type: "registry:component",
    }],
  },
  "floating-label-input": {
    name: "floating-label-input",
    description: "Material UI floating label input",
    type: "registry:component",
    files: [{
      path: "src/registry/default/ui/floating-label-input.tsx",
      content: "import * as React from 'react';\n\nimport { cn } from '@/lib/utils';\nimport { Label } from '@radix-ui/react-label';\nimport { Input } from '@/components/ui/input';\n\nexport const FloatingLabel: React.FC<React.ComponentProps<typeof Label>> = ({\n  className,\n  ...props\n}) => {\n  return (\n    <Label\n      className={cn(\n        'peer-has-focus:secondary bg-background absolute start-2 top-2 z-10 origin-[0] -translate-y-4 scale-75 transform cursor-text px-2 text-sm text-gray-500 duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-2 peer-focus:-translate-y-4 peer-focus:scale-75 peer-focus:px-2 rtl:peer-focus:left-auto rtl:peer-focus:translate-x-1/4',\n        className,\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const FloatingInput: React.FC<\n  React.ComponentProps<'input'> & {\n    label: string;\n  }\n> = ({ id, label, className, ...props }) => {\n  return (\n    <div className='relative'>\n      <Input\n        id={id}\n        className={cn('peer bg-background', className)}\n        placeholder=' '\n        {...props}\n      />\n      <FloatingLabel htmlFor={id}>{label}</FloatingLabel>\n    </div>\n  );\n};\n",
      type: "registry:component",
    }],
  },
  "overflow-tooltip": {
    name: "overflow-tooltip",
    description: "",
    type: "registry:component",
    files: [{
      path: "src/registry/default/ui/overflow-tooltip.tsx",
      content: "'use client';\n\nimport * as React from 'react';\n\nimport {\n  Tooltip,\n  TooltipProvider,\n  TooltipContent,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport { cn } from '@/lib/utils';\n\nexport const OverflowTooltip: React.FC<\n  React.ComponentProps<typeof TooltipContent>\n> = ({ className, children, ...props }) => {\n  const [overflowed, setOverflowed] = React.useState(false);\n  const ref = React.useRef<HTMLDivElement>(null);\n  React.useEffect(() => {\n    if (ref.current && ref.current?.scrollWidth > ref.current?.clientWidth) {\n      setOverflowed(true);\n    }\n  }, []);\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <div className='truncate' ref={ref}>\n            {children}\n          </div>\n        </TooltipTrigger>\n        {overflowed && (\n          <TooltipContent className={cn('text-sm', className)} {...props}>\n            {children}\n          </TooltipContent>\n        )}\n      </Tooltip>\n    </TooltipProvider>\n  );\n};\n",
      type: "registry:component",
    }],
  },
  "theme-switch": {
    name: "theme-switch",
    description: "Animated theme switch",
    type: "registry:component",
    files: [{
      path: "src/registry/default/ui/theme-switch.tsx",
      content: "'use client';\n\nimport React, { type JSX, useEffect, useState } from 'react';\nimport { MonitorIcon, MoonStarIcon, SunIcon } from 'lucide-react';\nimport { motion } from 'motion/react';\nimport { useTheme } from 'next-themes';\n\nimport { cn } from '@/lib/utils';\n\nconst ThemeOption = ({\n  icon,\n  value,\n  isActive,\n  onClick,\n}: {\n  icon: JSX.Element;\n  value: string;\n  isActive?: boolean;\n  onClick: (value: string) => void;\n}) => {\n  return (\n    <button\n      className={cn(\n        'relative flex size-8 cursor-default items-center justify-center rounded-full transition-all [&_svg]:size-4',\n        isActive\n          ? 'text-zinc-950 dark:text-zinc-50'\n          : 'text-zinc-400 hover:text-zinc-950 dark:text-zinc-500 dark:hover:text-zinc-50',\n      )}\n      role='radio'\n      aria-checked={isActive}\n      aria-label={\`Switch to \${value} theme\`}\n      onClick={() => onClick(value)}\n    >\n      {icon}\n\n      {isActive && (\n        <motion.div\n          layoutId='theme-option'\n          transition={{ type: 'spring', bounce: 0.3, duration: 0.6 }}\n          className='absolute inset-0 rounded-full border border-zinc-200 dark:border-zinc-700'\n        />\n      )}\n    </button>\n  );\n};\n\nconst THEME_OPTIONS = [\n  {\n    icon: <MonitorIcon />,\n    value: 'system',\n  },\n  {\n    icon: <SunIcon />,\n    value: 'light',\n  },\n  {\n    icon: <MoonStarIcon />,\n    value: 'dark',\n  },\n];\n\nconst ThemeSwitch = () => {\n  const { theme, setTheme } = useTheme();\n\n  const [isMounted, setIsMounted] = useState(false);\n\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  if (!isMounted) {\n    return <div className='flex h-8 w-24' />;\n  }\n\n  return (\n    <motion.div\n      key={String(isMounted)}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n      className='inline-flex items-center overflow-hidden rounded-full bg-white ring-1 ring-zinc-200 ring-inset dark:bg-zinc-950 dark:ring-zinc-700'\n      role='radiogroup'\n    >\n      {THEME_OPTIONS.map((option) => (\n        <ThemeOption\n          key={option.value}\n          icon={option.icon}\n          value={option.value}\n          isActive={theme === option.value}\n          onClick={setTheme}\n        />\n      ))}\n    </motion.div>\n  );\n};\n\nexport { ThemeSwitch };\n",
      type: "registry:component",
    }],
  },
  "use-boolean": {
    name: "use-boolean",
    description: "A hook to manage boolean states with common methods to set the value to true, false or toggle between them",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/use-boolean.ts",
      content: "'use client';\n\nimport * as React from 'react';\n\nexport function useBoolean(defaultValue = false) {\n  if (typeof defaultValue !== 'boolean') {\n    throw new Error('defaultValue must be \`true\` or \`false\`');\n  }\n  const [value, setValue] = React.useState(defaultValue);\n\n  const setTrue = React.useCallback(() => {\n    setValue(true);\n  }, []);\n\n  const setFalse = React.useCallback(() => {\n    setValue(false);\n  }, []);\n\n  const toggle = React.useCallback(() => {\n    setValue((x) => !x);\n  }, []);\n\n  return { value, setValue, setTrue, setFalse, toggle };\n}\n",
      type: "registry:hook",
    }],
  },
  "use-file-upload": {
    name: "use-file-upload",
    description: "A flexible and feature-rich React hook for handling file uploads with drag-and-drop support, file validation, and preview generation.",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/use-file-upload.ts",
      content: "'use client';\n\nimport * as React from 'react';\n\nexport type FileMetadata = {\n  name: string;\n  size: number;\n  type: string;\n  url: string;\n  id: string;\n};\n\nexport type FileWithPreview = {\n  file: File | FileMetadata;\n  id: string;\n  preview?: string;\n};\n\nexport type FileUploadOptions = {\n  maxFiles?: number;\n  maxSize?: number;\n  accept?: string;\n  multiple?: boolean;\n  initialFiles?: FileMetadata[];\n  onFilesChange?: (files: FileWithPreview[]) => void;\n  onFilesAdded?: (addedFiles: FileWithPreview[]) => void;\n};\n\nexport type FileUploadState = {\n  files: FileWithPreview[];\n  isDragging: boolean;\n  errors: string[];\n};\n\nexport type FileUploadActions = {\n  addFiles: (files: FileList | File[]) => void;\n  removeFile: (id: string) => void;\n  clearFiles: () => void;\n  clearErrors: () => void;\n  handleDragEnter: (e: React.DragEvent<HTMLElement>) => void;\n  handleDragLeave: (e: React.DragEvent<HTMLElement>) => void;\n  handleDragOver: (e: React.DragEvent<HTMLElement>) => void;\n  handleDrop: (e: React.DragEvent<HTMLElement>) => void;\n  handleFileChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  openFileDialog: () => void;\n  getInputProps: (\n    props?: React.InputHTMLAttributes<HTMLInputElement>,\n  ) => React.InputHTMLAttributes<HTMLInputElement> & {\n    ref: React.Ref<HTMLInputElement>;\n  };\n};\n\nexport const useFileUpload = (\n  options: FileUploadOptions = {},\n): [FileUploadState, FileUploadActions] => {\n  const {\n    maxFiles = Infinity,\n    maxSize = Infinity,\n    accept = '*',\n    multiple = false,\n    initialFiles = [],\n    onFilesChange,\n    onFilesAdded,\n  } = options;\n\n  const [state, setState] = React.useState<FileUploadState>({\n    files: initialFiles.map((file) => ({\n      file,\n      id: file.id,\n      preview: file.url,\n    })),\n    isDragging: false,\n    errors: [],\n  });\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const validateFile = React.useCallback(\n    (file: File | FileMetadata): string | null => {\n      if (file instanceof File) {\n        if (file.size > maxSize) {\n          return \`File \"\${file.name}\" exceeds the maximum size of \${formatBytes(\n            maxSize,\n          )}.\`;\n        }\n      } else {\n        if (file.size > maxSize) {\n          return \`File \"\${file.name}\" exceeds the maximum size of \${formatBytes(\n            maxSize,\n          )}.\`;\n        }\n      }\n\n      if (accept !== '*') {\n        const acceptedTypes = accept.split(',').map((type) => type.trim());\n        const fileType = file instanceof File ? file.type || '' : file.type;\n        const fileExtension = \`.\${\n          file instanceof File\n            ? file.name.split('.').pop()\n            : file.name.split('.').pop()\n        }\`;\n\n        const isAccepted = acceptedTypes.some((type) => {\n          if (type.startsWith('.')) {\n            return fileExtension.toLowerCase() === type.toLowerCase();\n          }\n          if (type.endsWith('/*')) {\n            const baseType = type.split('/')[0];\n            return fileType.startsWith(\`\${baseType}/\`);\n          }\n          return fileType === type;\n        });\n\n        if (!isAccepted) {\n          return \`File \"\${\n            file instanceof File ? file.name : file.name\n          }\" is not an accepted file type.\`;\n        }\n      }\n\n      return null;\n    },\n    [accept, maxSize],\n  );\n\n  const createPreview = React.useCallback(\n    (file: File | FileMetadata): string | undefined => {\n      if (file instanceof File) {\n        return URL.createObjectURL(file);\n      }\n      return file.url;\n    },\n    [],\n  );\n\n  const generateUniqueId = React.useCallback(\n    (file: File | FileMetadata): string => {\n      if (file instanceof File) {\n        return \`\${file.name}-\${Date.now()}-\${Math.random()\n          .toString(36)\n          .substring(2, 9)}\`;\n      }\n      return file.id;\n    },\n    [],\n  );\n\n  const clearFiles = React.useCallback(() => {\n    setState((prev) => {\n      prev.files.forEach((file) => {\n        if (\n          file.preview &&\n          file.file instanceof File &&\n          file.file.type.startsWith('image/')\n        ) {\n          URL.revokeObjectURL(file.preview);\n        }\n      });\n\n      if (inputRef.current) {\n        inputRef.current.value = '';\n      }\n\n      const newState = {\n        ...prev,\n        files: [],\n        errors: [],\n      };\n\n      onFilesChange?.(newState.files);\n      return newState;\n    });\n  }, [onFilesChange]);\n\n  const addFiles = React.useCallback(\n    (newFiles: FileList | File[]) => {\n      if (!newFiles || newFiles.length === 0) return;\n\n      const newFilesArray = Array.from(newFiles);\n      const errors: string[] = [];\n\n      setState((prev) => ({ ...prev, errors: [] }));\n\n      if (!multiple) {\n        clearFiles();\n      }\n\n      if (\n        multiple &&\n        maxFiles !== Infinity &&\n        state.files.length + newFilesArray.length > maxFiles\n      ) {\n        errors.push(\`You can only upload a maximum of \${maxFiles} files.\`);\n        setState((prev) => ({ ...prev, errors }));\n        return;\n      }\n\n      const validFiles: FileWithPreview[] = [];\n\n      newFilesArray.forEach((file) => {\n        if (multiple) {\n          const isDuplicate = state.files.some(\n            (existingFile) =>\n              existingFile.file.name === file.name &&\n              existingFile.file.size === file.size,\n          );\n\n          if (isDuplicate) {\n            return;\n          }\n        }\n\n        if (file.size > maxSize) {\n          errors.push(\n            multiple\n              ? \`Some files exceed the maximum size of \${formatBytes(maxSize)}.\`\n              : \`File exceeds the maximum size of \${formatBytes(maxSize)}.\`,\n          );\n          return;\n        }\n\n        const error = validateFile(file);\n        if (error) {\n          errors.push(error);\n        } else {\n          validFiles.push({\n            file,\n            id: generateUniqueId(file),\n            preview: createPreview(file),\n          });\n        }\n      });\n\n      if (validFiles.length > 0) {\n        onFilesAdded?.(validFiles);\n\n        setState((prev) => {\n          const newFiles = !multiple\n            ? validFiles\n            : [...prev.files, ...validFiles];\n          onFilesChange?.(newFiles);\n          return {\n            ...prev,\n            files: newFiles,\n            errors,\n          };\n        });\n      } else if (errors.length > 0) {\n        setState((prev) => ({\n          ...prev,\n          errors,\n        }));\n      }\n\n      if (inputRef.current) {\n        inputRef.current.value = '';\n      }\n    },\n    [\n      state.files.length,\n      maxFiles,\n      multiple,\n      maxSize,\n      validateFile,\n      createPreview,\n      generateUniqueId,\n      clearFiles,\n      onFilesChange,\n      onFilesAdded,\n    ],\n  );\n\n  const removeFile = React.useCallback(\n    (id: string) => {\n      setState((prev) => {\n        const fileToRemove = prev.files.find((file) => file.id === id);\n        if (\n          fileToRemove &&\n          fileToRemove.preview &&\n          fileToRemove.file instanceof File &&\n          fileToRemove.file.type.startsWith('image/')\n        ) {\n          URL.revokeObjectURL(fileToRemove.preview);\n        }\n\n        const newFiles = prev.files.filter((file) => file.id !== id);\n        onFilesChange?.(newFiles);\n\n        return {\n          ...prev,\n          files: newFiles,\n          errors: [],\n        };\n      });\n    },\n    [onFilesChange],\n  );\n\n  const clearErrors = React.useCallback(() => {\n    setState((prev) => ({\n      ...prev,\n      errors: [],\n    }));\n  }, []);\n\n  const handleDragEnter = React.useCallback(\n    (e: React.DragEvent<HTMLElement>) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setState((prev) => ({ ...prev, isDragging: true }));\n    },\n    [],\n  );\n\n  const handleDragLeave = React.useCallback(\n    (e: React.DragEvent<HTMLElement>) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (e.currentTarget.contains(e.relatedTarget as Node)) {\n        return;\n      }\n\n      setState((prev) => ({ ...prev, isDragging: false }));\n    },\n    [],\n  );\n\n  const handleDragOver = React.useCallback(\n    (e: React.DragEvent<HTMLElement>) => {\n      e.preventDefault();\n      e.stopPropagation();\n    },\n    [],\n  );\n\n  const handleDrop = React.useCallback(\n    (e: React.DragEvent<HTMLElement>) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setState((prev) => ({ ...prev, isDragging: false }));\n\n      if (inputRef.current?.disabled) {\n        return;\n      }\n\n      if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n        if (!multiple) {\n          const file = e.dataTransfer.files[0];\n          addFiles([file!]);\n        } else {\n          addFiles(e.dataTransfer.files);\n        }\n      }\n    },\n    [addFiles, multiple],\n  );\n\n  const handleFileChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.target.files && e.target.files.length > 0) {\n        addFiles(e.target.files);\n      }\n    },\n    [addFiles],\n  );\n\n  const openFileDialog = React.useCallback(() => {\n    if (inputRef.current) {\n      inputRef.current.click();\n    }\n  }, []);\n\n  const getInputProps = React.useCallback(\n    (props: React.InputHTMLAttributes<HTMLInputElement> = {}) => {\n      return {\n        ...props,\n        type: 'file' as const,\n        onChange: handleFileChange,\n        accept: props.accept || accept,\n        multiple: props.multiple !== undefined ? props.multiple : multiple,\n        ref: inputRef,\n      };\n    },\n    [accept, multiple, handleFileChange],\n  );\n\n  return [\n    state,\n    {\n      addFiles,\n      removeFile,\n      clearFiles,\n      clearErrors,\n      handleDragEnter,\n      handleDragLeave,\n      handleDragOver,\n      handleDrop,\n      handleFileChange,\n      openFileDialog,\n      getInputProps,\n    },\n  ];\n};\n\nexport const formatBytes = (bytes: number, decimals = 2): string => {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  const size = sizes[i] as string;\n\n  return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + size;\n};\n",
      type: "registry:hook",
    }],
  },
  "use-mounted": {
    name: "use-mounted",
    description: "A hook that returns a boolean to check when the component has mounted",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/use-mounted.ts",
      content: "'use client';\n\nimport * as React from 'react';\n\nexport const useMounted = () => {\n  const [mounted, setMounted] = React.useState<boolean>(false);\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n  return mounted;\n};\n",
      type: "registry:hook",
    }],
  },
  "use-interval": {
    name: "use-interval",
    description: "A hook that executes a callback function at specified delays using the useInterval API",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/use-interval.ts",
      content: "'use client';\n\nimport * as React from 'react';\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n  const ref = React.useRef(callback);\n  React.useEffect(() => {\n    ref.current = callback;\n  }, [callback]);\n\n  React.useEffect(() => {\n    if (delay === null || typeof delay !== 'number') {\n      return;\n    }\n    const tick = () => ref.current();\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n};\n",
      type: "registry:hook",
    }],
  },
  "use-theme": {
    name: "use-theme",
    description: "An extension to next-theme's use-theme hook to manage multiple shadcn color theme",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/use-theme.ts",
      content: "'use client';\n\nimport * as React from 'react';\nimport { useTheme as useNextTheme } from 'next-themes';\n\n// !callout[/colorThemes/] Add your own theme names here\nexport const colorThemes = [\n  'default',\n  'bubblegum',\n  'monochrome',\n  'supabase',\n  'twitter',\n  'vercel',\n] as const;\n\nexport type ColorTheme = (typeof colorThemes)[number];\nexport type Theme = 'system' | 'light' | 'dark';\n\nexport const useTheme = () => {\n  const { setTheme, resolvedTheme } = useNextTheme();\n  const [colorTheme, setColorTheme] = React.useState<ColorTheme>('default');\n\n  React.useEffect(() => {\n    if (typeof window === 'undefined') return;\n    const saved = localStorage.getItem('color-theme') as ColorTheme | null;\n    if (saved) {\n      setColorTheme(saved);\n      document.documentElement.classList.add(\`theme-\${saved}\`);\n    }\n  }, []);\n\n  const updateColorTheme = React.useCallback((next: ColorTheme) => {\n    if (typeof window === 'undefined') return;\n\n    document.documentElement.classList.remove(\n      ...colorThemes.map((c) => \`theme-\${c}\`),\n    );\n    if (next !== 'default') {\n      document.documentElement.classList.add(\`theme-\${next}\`);\n    }\n    localStorage.setItem('color-theme', next);\n    setColorTheme(next);\n  }, []);\n\n  return {\n    setTheme,\n    theme: resolvedTheme as Theme,\n    colorTheme: colorTheme,\n    setColorTheme: updateColorTheme,\n  };\n};\n",
      type: "registry:hook",
    }],
  },
  "use-timeout": {
    name: "use-timeout",
    description: "A hook that executes a callback function after a specified delay using the setTimeout API",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/use-interval.ts",
      content: "'use client';\n\nimport * as React from 'react';\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n  const ref = React.useRef(callback);\n  React.useEffect(() => {\n    ref.current = callback;\n  }, [callback]);\n\n  React.useEffect(() => {\n    if (delay === null || typeof delay !== 'number') {\n      return;\n    }\n    const tick = () => ref.current();\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n};\n",
      type: "registry:hook",
    }],
  },
  "use-unmount": {
    name: "use-unmount",
    description: "A hook that runs a cleanup function when the component is unmounted",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/use-unmount.ts",
      content: "import * as React from 'react';\n\nexport const useUnmount = (f: () => void) => {\n  const fRef = React.useRef(f);\n  fRef.current = f;\n  React.useEffect(\n    () => () => {\n      fRef.current();\n    },\n    [],\n  );\n};\n",
      type: "registry:hook",
    }],
  },
  "color-picker-demo": {
    name: "color-picker-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/color-picker-demo.tsx",
      content: "'use client';\n\nimport * as React from 'react';\n\nimport { ColorPicker } from '@/ui/color-picker';\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState<string>('#06b6d4');\n  return <ColorPicker value={color} onChange={setColor} />;\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/color-picker-demo.tsx")),
    source: "'use client';\n\nimport * as React from 'react';\n\nimport { ColorPicker } from '@/ui/color-picker';\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState<string>('#06b6d4');\n  return <ColorPicker value={color} onChange={setColor} />;\n}\n",
  },
  "color-picker-alpha-demo": {
    name: "color-picker-alpha-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/color-picker-alpha-demo.tsx",
      content: "'use client';\n\nimport * as React from 'react';\n\nimport { ColorPicker } from '@/ui/color-picker';\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState<string>('#7c3aed');\n  return <ColorPicker value={color} onChange={setColor} alpha />;\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/color-picker-alpha-demo.tsx")),
    source: "'use client';\n\nimport * as React from 'react';\n\nimport { ColorPicker } from '@/ui/color-picker';\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState<string>('#7c3aed');\n  return <ColorPicker value={color} onChange={setColor} alpha />;\n}\n",
  },
  "color-picker-popover-demo": {
    name: "color-picker-popover-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/color-picker-popover-demo.tsx",
      content: "'use client';\n\nimport * as React from 'react';\nimport { Paintbrush } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\nimport { ColorPicker } from '@/ui/color-picker';\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState<string>('');\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant='outline' className={cn(!color && 'text-slate-500')}>\n          <div className='flex w-full items-center gap-2'>\n            {color ? (\n              <div\n                className={cn(\n                  'size-4 rounded border !bg-cover !bg-center transition-all',\n                )}\n                style={{ background: color }}\n              />\n            ) : (\n              <Paintbrush className='size-4' />\n            )}\n          </div>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className='w-60 space-y-2'>\n        <ColorPicker value={color} onChange={setColor} />\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/color-picker-popover-demo.tsx")),
    source: "'use client';\n\nimport * as React from 'react';\nimport { Paintbrush } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\nimport { ColorPicker } from '@/ui/color-picker';\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState<string>('');\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant='outline' className={cn(!color && 'text-slate-500')}>\n          <div className='flex w-full items-center gap-2'>\n            {color ? (\n              <div\n                className={cn(\n                  'size-4 rounded border !bg-cover !bg-center transition-all',\n                )}\n                style={{ background: color }}\n              />\n            ) : (\n              <Paintbrush className='size-4' />\n            )}\n          </div>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className='w-60 space-y-2'>\n        <ColorPicker value={color} onChange={setColor} />\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
  },
  "floating-label-input-demo": {
    name: "floating-label-input-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/floating-label-input-demo.tsx",
      content: "import * as React from 'react';\n\nimport { FloatingInput } from '@/ui/floating-label-input';\n\nexport default function FloatingInputDemo() {\n  return (\n    <FloatingInput id='floating-label-input-demo' label='Floating Label' />\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/floating-label-input-demo.tsx")),
    source: "import * as React from 'react';\n\nimport { FloatingInput } from '@/ui/floating-label-input';\n\nexport default function FloatingInputDemo() {\n  return (\n    <FloatingInput id='floating-label-input-demo' label='Floating Label' />\n  );\n}\n",
  },
  "overflow-tooltip-demo": {
    name: "overflow-tooltip-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/overflow-tooltip-demo.tsx",
      content: "import * as React from 'react';\n\nexport default function OverflowTooltipDemo() {\n  return <></>;\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/overflow-tooltip-demo.tsx")),
    source: "import * as React from 'react';\n\nexport default function OverflowTooltipDemo() {\n  return <></>;\n}\n",
  },
  "theme-switch-demo": {
    name: "theme-switch-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/theme-switch-demo.tsx",
      content: "import { ThemeSwitch } from '@/ui/theme-switch';\n\nexport default function ThemeSwitchDemo() {\n  return <ThemeSwitch />;\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/theme-switch-demo.tsx")),
    source: "import { ThemeSwitch } from '@/ui/theme-switch';\n\nexport default function ThemeSwitchDemo() {\n  return <ThemeSwitch />;\n}\n",
  },
  "use-file-upload-demo": {
    name: "use-file-upload-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/use-file-upload-demo.tsx",
      content: "'use client';\n\nimport {\n  AlertCircleIcon,\n  FileArchiveIcon,\n  FileIcon,\n  FileSpreadsheetIcon,\n  FileTextIcon,\n  FileUpIcon,\n  HeadphonesIcon,\n  ImageIcon,\n  VideoIcon,\n  XIcon,\n} from 'lucide-react';\n\nimport {\n  formatBytes,\n  useFileUpload,\n} from '@/hooks/use-file-upload';\nimport { Button } from '@/components/ui/button';\n\nconst getFileIcon = (file: { file: File | { type: string; name: string } }) => {\n  const fileType = file.file instanceof File ? file.file.type : file.file.type;\n  const fileName = file.file instanceof File ? file.file.name : file.file.name;\n\n  if (\n    fileType.includes('pdf') ||\n    fileName.endsWith('.pdf') ||\n    fileType.includes('word') ||\n    fileName.endsWith('.doc') ||\n    fileName.endsWith('.docx')\n  ) {\n    return <FileTextIcon className='size-4 opacity-60' />;\n  } else if (\n    fileType.includes('zip') ||\n    fileType.includes('archive') ||\n    fileName.endsWith('.zip') ||\n    fileName.endsWith('.rar')\n  ) {\n    return <FileArchiveIcon className='size-4 opacity-60' />;\n  } else if (\n    fileType.includes('excel') ||\n    fileName.endsWith('.xls') ||\n    fileName.endsWith('.xlsx')\n  ) {\n    return <FileSpreadsheetIcon className='size-4 opacity-60' />;\n  } else if (fileType.includes('video/')) {\n    return <VideoIcon className='size-4 opacity-60' />;\n  } else if (fileType.includes('audio/')) {\n    return <HeadphonesIcon className='size-4 opacity-60' />;\n  } else if (fileType.startsWith('image/')) {\n    return <ImageIcon className='size-4 opacity-60' />;\n  }\n  return <FileIcon className='size-4 opacity-60' />;\n};\n\nexport default function useFileUploadDemo() {\n  const maxSize = 100 * 1024 * 1024; // 10MB default\n  const maxFiles = 10;\n\n  const [\n    { files, isDragging, errors },\n    {\n      handleDragEnter,\n      handleDragLeave,\n      handleDragOver,\n      handleDrop,\n      openFileDialog,\n      removeFile,\n      clearFiles,\n      getInputProps,\n    },\n  ] = useFileUpload({\n    multiple: true,\n    maxFiles,\n    maxSize,\n  });\n\n  return (\n    <div className='flex flex-col gap-2 bg-background'>\n      {/* Drop area */}\n      <div\n        role='button'\n        onClick={openFileDialog}\n        onDragEnter={handleDragEnter}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n        data-dragging={isDragging || undefined}\n        className='border-input hover:bg-accent/50 data-[dragging=true]:bg-accent/50 has-[input:focus]:border-ring has-[input:focus]:ring-ring/50 flex min-h-40 flex-col items-center justify-center rounded-xl border p-4 transition-colors has-disabled:pointer-events-none has-disabled:opacity-50 has-[input:focus]:ring-[3px]'\n      >\n        <input\n          {...getInputProps()}\n          className='sr-only'\n          aria-label='Upload files'\n        />\n\n        <div className='flex flex-col items-center justify-center text-center'>\n          <div\n            className='bg-background mb-2 flex size-11 shrink-0 items-center justify-center rounded-full border'\n            aria-hidden='true'\n          >\n            <FileUpIcon className='size-4 opacity-60' />\n          </div>\n          <p className='mb-1.5 text-sm font-medium'>Upload files</p>\n          <p className='text-muted-foreground mb-2 text-xs'>\n            Drag & drop or click to browse\n          </p>\n          <div className='text-muted-foreground/70 flex flex-wrap justify-center gap-1 text-xs'>\n            <span>All files</span>\n            <span>∙</span>\n            <span>Max {maxFiles} files</span>\n            <span>∙</span>\n            <span>Up to {formatBytes(maxSize)}</span>\n          </div>\n        </div>\n      </div>\n\n      {errors.length > 0 && (\n        <div\n          className='text-destructive flex items-center gap-1 text-xs'\n          role='alert'\n        >\n          <AlertCircleIcon className='size-3 shrink-0' />\n          <span>{errors[0]}</span>\n        </div>\n      )}\n\n      {/* File list */}\n      {files.length > 0 && (\n        <div className='space-y-2'>\n          {files.map((file) => (\n            <div\n              key={file.id}\n              className='bg-background flex items-center justify-between gap-2 rounded-lg border p-2 pe-3'\n            >\n              <div className='flex items-center gap-3 overflow-hidden'>\n                <div className='flex aspect-square size-10 shrink-0 items-center justify-center rounded border'>\n                  {getFileIcon(file)}\n                </div>\n                <div className='flex min-w-0 flex-col gap-0.5'>\n                  <p className='truncate text-[13px] font-medium'>\n                    {file.file instanceof File\n                      ? file.file.name\n                      : file.file.name}\n                  </p>\n                  <p className='text-muted-foreground text-xs'>\n                    {formatBytes(\n                      file.file instanceof File\n                        ? file.file.size\n                        : file.file.size,\n                    )}\n                  </p>\n                </div>\n              </div>\n\n              <Button\n                size='icon'\n                variant='ghost'\n                className='text-muted-foreground/80 hover:text-foreground -me-2 size-8 hover:bg-transparent'\n                onClick={() => removeFile(file.id)}\n                aria-label='Remove file'\n              >\n                <XIcon className='size-4' aria-hidden='true' />\n              </Button>\n            </div>\n          ))}\n\n          {files.length > 1 && (\n            <Button className='w-full' variant='outline' onClick={clearFiles}>\n              Remove all files\n            </Button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/use-file-upload-demo.tsx")),
    source: "'use client';\n\nimport {\n  AlertCircleIcon,\n  FileArchiveIcon,\n  FileIcon,\n  FileSpreadsheetIcon,\n  FileTextIcon,\n  FileUpIcon,\n  HeadphonesIcon,\n  ImageIcon,\n  VideoIcon,\n  XIcon,\n} from 'lucide-react';\n\nimport {\n  formatBytes,\n  useFileUpload,\n} from '@/hooks/use-file-upload';\nimport { Button } from '@/components/ui/button';\n\nconst getFileIcon = (file: { file: File | { type: string; name: string } }) => {\n  const fileType = file.file instanceof File ? file.file.type : file.file.type;\n  const fileName = file.file instanceof File ? file.file.name : file.file.name;\n\n  if (\n    fileType.includes('pdf') ||\n    fileName.endsWith('.pdf') ||\n    fileType.includes('word') ||\n    fileName.endsWith('.doc') ||\n    fileName.endsWith('.docx')\n  ) {\n    return <FileTextIcon className='size-4 opacity-60' />;\n  } else if (\n    fileType.includes('zip') ||\n    fileType.includes('archive') ||\n    fileName.endsWith('.zip') ||\n    fileName.endsWith('.rar')\n  ) {\n    return <FileArchiveIcon className='size-4 opacity-60' />;\n  } else if (\n    fileType.includes('excel') ||\n    fileName.endsWith('.xls') ||\n    fileName.endsWith('.xlsx')\n  ) {\n    return <FileSpreadsheetIcon className='size-4 opacity-60' />;\n  } else if (fileType.includes('video/')) {\n    return <VideoIcon className='size-4 opacity-60' />;\n  } else if (fileType.includes('audio/')) {\n    return <HeadphonesIcon className='size-4 opacity-60' />;\n  } else if (fileType.startsWith('image/')) {\n    return <ImageIcon className='size-4 opacity-60' />;\n  }\n  return <FileIcon className='size-4 opacity-60' />;\n};\n\nexport default function useFileUploadDemo() {\n  const maxSize = 100 * 1024 * 1024; // 10MB default\n  const maxFiles = 10;\n\n  const [\n    { files, isDragging, errors },\n    {\n      handleDragEnter,\n      handleDragLeave,\n      handleDragOver,\n      handleDrop,\n      openFileDialog,\n      removeFile,\n      clearFiles,\n      getInputProps,\n    },\n  ] = useFileUpload({\n    multiple: true,\n    maxFiles,\n    maxSize,\n  });\n\n  return (\n    <div className='flex flex-col gap-2 bg-background'>\n      {/* Drop area */}\n      <div\n        role='button'\n        onClick={openFileDialog}\n        onDragEnter={handleDragEnter}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n        data-dragging={isDragging || undefined}\n        className='border-input hover:bg-accent/50 data-[dragging=true]:bg-accent/50 has-[input:focus]:border-ring has-[input:focus]:ring-ring/50 flex min-h-40 flex-col items-center justify-center rounded-xl border p-4 transition-colors has-disabled:pointer-events-none has-disabled:opacity-50 has-[input:focus]:ring-[3px]'\n      >\n        <input\n          {...getInputProps()}\n          className='sr-only'\n          aria-label='Upload files'\n        />\n\n        <div className='flex flex-col items-center justify-center text-center'>\n          <div\n            className='bg-background mb-2 flex size-11 shrink-0 items-center justify-center rounded-full border'\n            aria-hidden='true'\n          >\n            <FileUpIcon className='size-4 opacity-60' />\n          </div>\n          <p className='mb-1.5 text-sm font-medium'>Upload files</p>\n          <p className='text-muted-foreground mb-2 text-xs'>\n            Drag & drop or click to browse\n          </p>\n          <div className='text-muted-foreground/70 flex flex-wrap justify-center gap-1 text-xs'>\n            <span>All files</span>\n            <span>∙</span>\n            <span>Max {maxFiles} files</span>\n            <span>∙</span>\n            <span>Up to {formatBytes(maxSize)}</span>\n          </div>\n        </div>\n      </div>\n\n      {errors.length > 0 && (\n        <div\n          className='text-destructive flex items-center gap-1 text-xs'\n          role='alert'\n        >\n          <AlertCircleIcon className='size-3 shrink-0' />\n          <span>{errors[0]}</span>\n        </div>\n      )}\n\n      {/* File list */}\n      {files.length > 0 && (\n        <div className='space-y-2'>\n          {files.map((file) => (\n            <div\n              key={file.id}\n              className='bg-background flex items-center justify-between gap-2 rounded-lg border p-2 pe-3'\n            >\n              <div className='flex items-center gap-3 overflow-hidden'>\n                <div className='flex aspect-square size-10 shrink-0 items-center justify-center rounded border'>\n                  {getFileIcon(file)}\n                </div>\n                <div className='flex min-w-0 flex-col gap-0.5'>\n                  <p className='truncate text-[13px] font-medium'>\n                    {file.file instanceof File\n                      ? file.file.name\n                      : file.file.name}\n                  </p>\n                  <p className='text-muted-foreground text-xs'>\n                    {formatBytes(\n                      file.file instanceof File\n                        ? file.file.size\n                        : file.file.size,\n                    )}\n                  </p>\n                </div>\n              </div>\n\n              <Button\n                size='icon'\n                variant='ghost'\n                className='text-muted-foreground/80 hover:text-foreground -me-2 size-8 hover:bg-transparent'\n                onClick={() => removeFile(file.id)}\n                aria-label='Remove file'\n              >\n                <XIcon className='size-4' aria-hidden='true' />\n              </Button>\n            </div>\n          ))}\n\n          {files.length > 1 && (\n            <Button className='w-full' variant='outline' onClick={clearFiles}>\n              Remove all files\n            </Button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n",
  },
  "use-interval-demo": {
    name: "use-interval-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/use-interval-demo.tsx",
      content: "'use client';\n\nimport * as React from 'react';\n\nimport { useInterval } from '@/hooks/use-interval';\n\nexport default function UseIntervalDemo() {\n  const colors = [\n    '#7081d0',\n    '#04d1f9',\n    '#37f499',\n    '#f7c67f',\n    '#f265b5',\n    '#a48cf2',\n    '#f16c75',\n    '#f1fc79',\n  ];\n  const [index, setIndex] = React.useState(0);\n\n  useInterval(() => setIndex((index) => index + 1), 1000);\n\n  const color = colors[index % colors.length];\n\n  return (\n    <div\n      className='size-48 rounded-xl transition-all duration-300 ease-in'\n      style={{\n        background: color,\n      }}\n    />\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/use-interval-demo.tsx")),
    source: "'use client';\n\nimport * as React from 'react';\n\nimport { useInterval } from '@/hooks/use-interval';\n\nexport default function UseIntervalDemo() {\n  const colors = [\n    '#7081d0',\n    '#04d1f9',\n    '#37f499',\n    '#f7c67f',\n    '#f265b5',\n    '#a48cf2',\n    '#f16c75',\n    '#f1fc79',\n  ];\n  const [index, setIndex] = React.useState(0);\n\n  useInterval(() => setIndex((index) => index + 1), 1000);\n\n  const color = colors[index % colors.length];\n\n  return (\n    <div\n      className='size-48 rounded-xl transition-all duration-300 ease-in'\n      style={{\n        background: color,\n      }}\n    />\n  );\n}\n",
  },
  "use-theme-demo": {
    name: "use-theme-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/use-theme-demo.tsx",
      content: "'use client';\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui';\nimport {\n  useTheme,\n  colorThemes,\n  type ColorTheme,\n} from '@/hooks/use-theme';\nimport { ThemeSwitch } from '@/registry/default/ui/theme-switch';\n\nexport default function UseThemeDemo() {\n  const { colorTheme, setColorTheme } = useTheme();\n  return (\n    <div className='bg-card text-card-foreground space-y-2 rounded-lg border p-4 shadow-sm'>\n      <div className='flex items-center justify-center'>\n        <ThemeSwitch />\n      </div>\n      <div className='flex flex-col gap-2'>\n        <Select\n          value={colorTheme}\n          onValueChange={(v: ColorTheme) => setColorTheme(v)}\n        >\n          <SelectTrigger className='capitalize'>\n            <SelectValue placeholder='Choose a theme' />\n          </SelectTrigger>\n          <SelectContent>\n            {colorThemes.map((theme) => (\n              <SelectItem key={theme} className='capitalize' value={theme}>\n                {theme}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/use-theme-demo.tsx")),
    source: "'use client';\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui';\nimport {\n  useTheme,\n  colorThemes,\n  type ColorTheme,\n} from '@/hooks/use-theme';\nimport { ThemeSwitch } from '@/registry/default/ui/theme-switch';\n\nexport default function UseThemeDemo() {\n  const { colorTheme, setColorTheme } = useTheme();\n  return (\n    <div className='bg-card text-card-foreground space-y-2 rounded-lg border p-4 shadow-sm'>\n      <div className='flex items-center justify-center'>\n        <ThemeSwitch />\n      </div>\n      <div className='flex flex-col gap-2'>\n        <Select\n          value={colorTheme}\n          onValueChange={(v: ColorTheme) => setColorTheme(v)}\n        >\n          <SelectTrigger className='capitalize'>\n            <SelectValue placeholder='Choose a theme' />\n          </SelectTrigger>\n          <SelectContent>\n            {colorThemes.map((theme) => (\n              <SelectItem key={theme} className='capitalize' value={theme}>\n                {theme}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n}\n",
  },
  "use-timeout-demo": {
    name: "use-timeout-demo",
    description: "",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/use-timeout-demo.tsx",
      content: "'use client';\n\nimport React from 'react';\nimport { Loader2, RefreshCwIcon } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { useTimeout } from '@/hooks/use-timeout';\n\nexport default function UseTimeoutDemo() {\n  const [loading, setLoading] = React.useState(true);\n\n  useTimeout(\n    () => {\n      setLoading(false);\n    },\n    !loading ? null : 2000,\n  );\n\n  return (\n    <div className='flex flex-col items-center gap-8'>\n      <Button onClick={() => setLoading(true)} disabled={loading}>\n        {loading ? (\n          <>\n            <Loader2 className='animate-spin' />\n            Loading...\n          </>\n        ) : (\n          <>\n            <RefreshCwIcon />\n            Reload\n          </>\n        )}\n      </Button>\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/use-timeout-demo.tsx")),
    source: "'use client';\n\nimport React from 'react';\nimport { Loader2, RefreshCwIcon } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { useTimeout } from '@/hooks/use-timeout';\n\nexport default function UseTimeoutDemo() {\n  const [loading, setLoading] = React.useState(true);\n\n  useTimeout(\n    () => {\n      setLoading(false);\n    },\n    !loading ? null : 2000,\n  );\n\n  return (\n    <div className='flex flex-col items-center gap-8'>\n      <Button onClick={() => setLoading(true)} disabled={loading}>\n        {loading ? (\n          <>\n            <Loader2 className='animate-spin' />\n            Loading...\n          </>\n        ) : (\n          <>\n            <RefreshCwIcon />\n            Reload\n          </>\n        )}\n      </Button>\n    </div>\n  );\n}\n",
  },
}